package pipeline.persistence.jdbc;

import java.sql.Connection;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

public class ConnectionWork {

	private Connection connection;

	// ==============================================================
	// Constructors
	// ==============================================================
	private ConnectionWork(Connection connection) {
		this.connection = connection;
	}

	// ==============================================================
	// Static methods
	// ==============================================================
	public static ConnectionWork on(DataSource dataSource) {
		try {
			return new ConnectionWork(dataSource.getConnection());
		} catch (SQLException e) {
			throw new JdbcWorkException(e);
		}
	}

	public static ConnectionWork on(Connection connection) {
		return new ConnectionWork(connection);
	}

	public Connection getConnection() {
		return connection;
	}

	public PreparedWork prepare(String sql) {
		try {
			return PreparedWork.on(getConnection().prepareStatement(sql));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public CallableWork prepareCall(String sql) {
		try {
			return CallableWork.on(getConnection().prepareCall(sql));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public ConnectionWork setAutoCommit(boolean autoCommit) {
		try {
			getConnection().setAutoCommit(autoCommit);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork commit() {
		try {
			getConnection().commit();
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork rollback() {
		try {
			getConnection().rollback();
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork close() {
		try {
			getConnection().close();
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;

	}

	public ConnectionWork setReadOnly(boolean readOnly) {
		try {
			getConnection().setReadOnly(readOnly);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork setCatalog(String catalog) {
		try {
			getConnection().setCatalog(catalog);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork setTransactionIsolation(int level) {
		try {
			getConnection().setTransactionIsolation(level);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;

	}

	public PreparedWork prepare(String sql, int resultSetType,
			int resultSetConcurrency) {
		try {
			return PreparedWork.on(getConnection()
					.prepareStatement(sql,
							resultSetType,
							resultSetConcurrency));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public CallableWork prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) {
		try {
			return CallableWork
					.on(getConnection()
							.prepareCall(sql,
									resultSetType,
									resultSetConcurrency));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public ConnectionWork setTypeMap(Map<String, Class<?>> map) {
		try {
			getConnection().setTypeMap(map);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public ConnectionWork setHoldability(int holdability) {
		try {
			getConnection().setHoldability(holdability);
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
		return this;
	}

	public PreparedWork prepare(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
	{
		try {
			return PreparedWork
					.on(getConnection()
							.prepareStatement(sql,
									resultSetType,
									resultSetConcurrency,
									resultSetHoldability));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}

	}

	public CallableWork prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
	{
		try {
			return CallableWork
					.on(getConnection()
							.prepareCall(sql,
									resultSetType,
									resultSetConcurrency,
									resultSetHoldability));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public PreparedWork prepare(String sql, int autoGeneratedKeys)
	{
		try {
			return PreparedWork
					.on(getConnection()
							.prepareStatement(sql,
									autoGeneratedKeys));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public PreparedWork prepare(String sql, int[] columnIndexes)
	{
		try {
			return PreparedWork
					.on(getConnection()
							.prepareStatement(sql,
									columnIndexes));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public PreparedWork prepare(String sql, String[] columnNames)
	{
		try {
			return PreparedWork
					.on(getConnection()
							.prepareStatement(sql,
									columnNames));
		} catch (SQLException e) {
			throw new JdbcException(e);
		}
	}

	public boolean isValid(int timeout) {

		return false;
	}

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {

	}

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {

	}

}
