package pipeline.persistence.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import pipeline.persistence.DataAccessException;

public class QuietStatement implements Statement {

	private Statement statement;

	public QuietStatement(Statement statement) {
		this.statement = statement;
	}

	public Statement getStatement() {
		return statement;
	}

	public boolean isWrapperFor(Class<?> iface) {
		try {
			return getStatement().isWrapperFor(iface);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public <T> T unwrap(Class<T> iface) {
		try {
			return getStatement().unwrap(iface);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public void addBatch(String sql) {
		try {
			getStatement().addBatch(sql);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public void cancel() {
		try {
			getStatement().cancel();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public void clearBatch() {
		try {
			getStatement().clearBatch();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void clearWarnings() {
		try {
			getStatement().clearWarnings();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void close() {
		try {
			getStatement().close();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public boolean execute(String sql) {
		try {
			return getStatement().execute(sql);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public boolean execute(String sql, int autoGeneratedKeys) {
		try {
			return getStatement().execute(sql, autoGeneratedKeys);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public boolean execute(String sql, int[] columnIndexes) {
		try {
			return getStatement().execute(sql, columnIndexes);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}
	}

	public boolean execute(String sql, String[] columnNames) {
		try {
			return getStatement().execute(sql, columnNames);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int[] executeBatch() {
		try {
			return getStatement().executeBatch();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public ResultSet executeQuery(String sql) {
		try {
			return getStatement().executeQuery(sql);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int executeUpdate(String sql) {
		try {
			return getStatement().executeUpdate(sql);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int executeUpdate(String sql, int autoGeneratedKeys) {
		try {
			return getStatement().executeUpdate(sql, autoGeneratedKeys);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int executeUpdate(String sql, int[] columnIndexes) {
		try {
			return getStatement().executeUpdate(sql, columnIndexes);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int executeUpdate(String sql, String[] columnNames) {
		try {
			return getStatement().executeUpdate(sql, columnNames);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public Connection getConnection() {
		try {
			return getStatement().getConnection();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getFetchDirection() {
		try {
			return getStatement().getFetchDirection();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getFetchSize() {
		try {
			return getStatement().getFetchSize();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public ResultSet getGeneratedKeys() {
		try {
			return getStatement().getGeneratedKeys();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getMaxFieldSize() {
		try {
			return getStatement().getMaxFieldSize();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getMaxRows() {
		try {
			return getStatement().getMaxRows();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public boolean getMoreResults() {
		try {
			return getStatement().getMoreResults();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public boolean getMoreResults(int current) {
		try {
			return getStatement().getMoreResults(current);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getQueryTimeout() {
		try {
			return getStatement().getQueryTimeout();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public ResultSet getResultSet() {
		try {
			return getStatement().getResultSet();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getResultSetConcurrency() {
		try {
			return getStatement().getResultSetConcurrency();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getResultSetHoldability() {
		try {
			return getStatement().getResultSetHoldability();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getResultSetType() {
		try {
			return getStatement().getResultSetType();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public int getUpdateCount() {
		try {
			return getStatement().getUpdateCount();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public SQLWarning getWarnings() {
		try {
			return getStatement().getWarnings();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public boolean isClosed() {
		try {
			return getStatement().isClosed();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public boolean isPoolable() {
		try {
			return getStatement().isPoolable();
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setCursorName(String name) {
		try {
			getStatement().setCursorName(name);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setEscapeProcessing(boolean enable) {
		try {
			getStatement().setEscapeProcessing(enable);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setFetchDirection(int direction) {
		try {
			getStatement().setFetchDirection(direction);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setFetchSize(int rows) {
		try {
			getStatement().setFetchSize(rows);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setMaxFieldSize(int max) {
		try {
			getStatement().setMaxFieldSize(max);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setMaxRows(int max) {
		try {
			getStatement().setMaxRows(max);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setPoolable(boolean poolable) {
		try {
			getStatement().setPoolable(poolable);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}

	public void setQueryTimeout(int seconds) {
		try {
			getStatement().setQueryTimeout(seconds);
		} catch (SQLException e) {

			throw new DataAccessException(e);
		}

	}
}
